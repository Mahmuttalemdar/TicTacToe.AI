name: Building(CMake)

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'LICENSE'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo
  PRODUCT: TicTacToeAI

jobs:
  macos-build:
    name: macOS Catalina 10.15
    runs-on: macos-10.15

    steps:
      - name: Checkout Source code
        uses: actions/checkout@v1

      - name: Install Qt
        run: brew install qt cmake

      - name: Configure
        run: |
          mkdir build
          cd build
          rm -rf ./src/app/TicTacToeAI.dmg ./src/app/TicTacToeAI.app/
          cmake .. -DQt5_DIR=$(brew --prefix qt5)/lib/cmake/Qt5 -DDEPLOYMENT_MODE=ON

      - name: Compile
        run: |
          cd build
          make

      - name: Build dmg package
        run: |
          cd build/src/app
          $(brew --prefix qt5)/bin/macdeployqt TicTacToeAI.app -dmg

      - name: Update dmg package links
        run: |
          cd build/src/app
          ../../../packaging/macos/update_package.sh

      - name: Upload dmg package
        shell: bash
        run: |
          python3 -m pip install -U -q requests
          echo "================MacOS dmg image download link================"
          echo $(python3 $GITHUB_WORKSPACE/scripts/upload_services/transferwee.py upload $GITHUB_WORKSPACE/build/src/app/TicTacToeAI.dmg)
          echo "=====no operation for you can see link in the log console====="

      - name: Artifact Upload
        uses: actions/upload-artifact@v2
        with:
          name: MacOS-artifact
          path: ${{ github.workspace }}/build/src/app/TicTacToeAI.dmg

  windows-build:
    name: VS 2019 ${{ matrix.config.arch }}-${{ matrix.type }}
    runs-on: windows-2019

    env:
      VCINSTALLDIR: C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/
      Qt5_DIR: ${{ github.workspace }}\build\Qt\${{ matrix.qt_ver }}\${{ matrix.config.qt_arch_install }}\lib\cmake\Qt5\
      QTDIR: ${{ github.workspace }}\build\Qt\${{ matrix.qt_ver }}\${{ matrix.config.qt_arch_install }}\
      # 2020.07
      VCPKG_VERSION: 56fffbe49dfb4dd8fae0940f272c5fd2b86be991
      VCPKG_PACKAGES: openssl-windows
      OPENSSL_ROOT_DIR: ${{ github.workspace }}\vcpkg\installed\${{ matrix.config.vcpkg_triplet }}\
    
    strategy:
      fail-fast: false
      matrix:
        qt_ver: [5.15.2]
        qt_target: [desktop]
        config:
        - {
            arch: x86,
            generator: "-G'Visual Studio 16 2019' -A Win32",
            vcpkg_triplet: x86-windows,
            qt_arch: win32_msvc2019,
            qt_arch_install: msvc2019,
            pak_arch: win32
          }
        - {
            arch: x64,
            generator: "-G'Visual Studio 16 2019' -A x64",
            vcpkg_triplet: x64-windows,
            qt_arch: win64_msvc2019_64,
            qt_arch_install: msvc2019_64,
            pak_arch: win64
          }

    steps:
      - uses: actions/checkout@v2

      - name: Restore from cache and run vcpkg
        uses: lukka/run-vcpkg@v4
        with:
          vcpkgArguments: ${{env.VCPKG_PACKAGES}}
          vcpkgDirectory: '${{ github.workspace }}\vcpkg'
          appendedCacheKey: ${{ matrix.config.vcpkg_triplet }}
          vcpkgGitCommitId: ${{ env.VCPKG_VERSION }}
          vcpkgTriplet: ${{ matrix.config.vcpkg_triplet }}

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ./build/Qt/${{ matrix.qt_ver }}/${{ matrix.config.qt_arch_install }}
          key: ${{ runner.os }}-QtCache/${{ matrix.qt_ver }}/${{ matrix.config.qt_arch }}

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_ver }}
          target:  ${{ matrix.qt_target }}
          arch: ${{ matrix.config.qt_arch }}
          dir: '${{ github.workspace }}/build/'
          modules: 'qtscript'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Configure
        working-directory: build
        shell: powershell
        run: |
          cmake -DCMAKE_BUILD_TYPE=$env:BUILD_TYPE -DDEPLOYMENT_MODE=ON ../

      - name: Build
        working-directory: build
        shell: powershell
        run: |
          cmake --build . --config $env:BUILD_TYPE

